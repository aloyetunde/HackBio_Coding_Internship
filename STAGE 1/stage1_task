# Function to simulate logistic growth
def logistic_growth(x, L=100, k=0.1, x0=50, lag_range=(5, 15), exp_range=(20, 40)):
    """
    Simulates a logistic population growth curve with randomized lag and exponential phases.
    
    Parameters:
    x - Time points
    L - Carrying capacity (max population size)
    k - Growth rate
    x0 - Midpoint (time at which population reaches half of L)
    lag_range - Range for randomizing lag phase duration
    exp_range - Range for randomizing exponential phase duration
    
    Returns:
    A list of population sizes over time.
    """
    lag_phase = lag_range[0] + (lag_range[1] - lag_range[0]) * (x % 3 / 3)  # Randomizing lag phase
    exp_phase = exp_range[0] + (exp_range[1] - exp_range[0]) * (x % 4 / 4)  # Randomizing exponential phase
    x0 = int(x0 + lag_phase - exp_phase / 2)  # Adjust midpoint dynamically
    
    return L / (1 + (2.71828 ** (-k * (x - x0))))  # Logistic function

# Function to generate a DataFrame with multiple growth curves
def generate_growth_curves(num_curves=100, time_range=(0, 100), step=1):
    """
    Generates a dataset with multiple logistic growth curves.
    
    Parameters:
    num_curves - Number of different growth curves to generate
    time_range - Tuple representing (start time, end time)
    step - Step size for time
     Returns:
    A dictionary containing growth curves for different runs.
    """
    growth_curves = {}
    
    for i in range(num_curves):
        growth_curves[f'Curve_{i+1}'] = [logistic_growth(t) for t in range(time_range[0], time_range[1], step)]
    
    return growth_curves

# Function to determine time to reach 80% of carrying capacity
def time_to_80_percent(L=100, k=0.1, x0=50):
    """
    Determines the time at which population reaches 80% of the carrying capacity.
    
    Parameters:
    L - Carrying capacity (max population size)
    k - Growth rate
    x0 - Midpoint (time at which population reaches half of L)
    
    Returns:
    Time required to reach 80% of carrying capacity.
    """
    target_population = 0.8 * L  # 80% of carrying capacity
    
    for t in range(200):  # Simulating a long-enough period
        pop_size = logistic_growth(t, L, k, x0)
        if pop_size >= target_population:
            return t  # Return time when 80% is reached
    
    return None  # In case population never reaches 80%

# Run the functions
growth_data = generate_growth_curves()  # Generate 100 growth curves
time_80 = time_to_80_percent()  # Determine time to reach 80% carrying capacity

# Print example output
print("Time to reach 80% of carrying capacity:", time_80)
print("Example Growth Curve:", list(growth_data.values())[0])  # Print first growth curve
